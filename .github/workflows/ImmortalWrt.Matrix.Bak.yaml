name: ImmortalWrt Matrix 2-Release
permissions: write-all

on:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'Enable SSH debugging'
        required: false
        default: 'false'
  schedule:
    - cron: '0 18 * * 5'  # ÊØèÂë®‰∫î 18:00 ÂÆöÊó∂Ëß¶Âèë

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  TZ: Asia/Shanghai
  UPLOAD_RELEASE: true
  FEEDS_CONF: feedss.conf.default
  PRODUCT_NAME: ImmWRT_Matrix
  PRODUCT_NAME_Bak: ImmWRT_Matrix_Bak
  DIY_P1_SH: LEDE/diy-part1.sh
  DIY_P2_SH: LEDE/diy-part2.sh

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - name: openwrt24-x86
            branch: openwrt-24.10
            config: LEDE/.x86_x64.mini.fix.config
            version: "24.10"
          - name: openwrt23-x86
            branch: openwrt-23.05
            config: LEDE/.x86_x64.mini.fix.config
            version: "23.05"
          - name: openwrt24-arm
            branch: openwrt-24.10
            config: LEDE/.Arm.mini.fix.config
            version: "24.10"
          - name: openwrt23-arm
            branch: openwrt-23.05
            config: LEDE/.Arm.mini.fix.config
            version: "23.05"

    steps:
      - name: Checkout source
        uses: actions/checkout@v3
      - name: Setup build environment
        run: |
          sudo -E apt-get -qq update
          sudo bash -c 'bash <(curl -s https://build-scripts.immortalwrt.org/init_build_environment.sh)'
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /mnt/workdir
          sudo chown $USER:$GROUPS /mnt/workdir
          echo "FILE_DATE2=$(date '+%Y%m%d%H%M')" >> $GITHUB_ENV
      
      - name: Clone OpenWrt source
        working-directory: /mnt/workdir
        run: |
          echo "üåÄ Ê≠£Âú®ÂÖãÈöÜ OpenWrt Ê∫êÁ†Å..."
          echo "REPO_URL = $REPO_URL"
          echo "BRANCH   = ${{ matrix.target.branch }}"
          echo "ÂΩìÂâçÂ∑•‰ΩúÁõÆÂΩïÔºö$(pwd)"
          echo "üîç ÂΩìÂâçÁõÆÂΩïÂÜÖÂÆπÔºö"
          ls -al

          git clone "$REPO_URL" -b "${{ matrix.target.branch }}" openwrt
          CLONE_STATUS=$?

          if [ $CLONE_STATUS -ne 0 ]; then
          echo "‚ùå git clone Â§±Ë¥•ÔºåÈÄÄÂá∫„ÄÇËØ∑Ê£ÄÊü•‰ªìÂ∫ìÂú∞ÂùÄÊàñÂàÜÊîØÊòØÂê¶Ê≠£Á°Æ„ÄÇ"
          exit 1
          fi

          echo "‚úÖ ÂÖãÈöÜÊàêÂäüÔºåÁ°ÆËÆ§ openwrt ÁõÆÂΩïÂ≠òÂú®Ôºö"
          ls -al openwrt

          # ÁâàÊú¨‰ø°ÊÅØ‰øùÂ≠ò
          mkdir -p $GITHUB_WORKSPACE/version-info/${{ matrix.target.branch }}
          cd openwrt
          git show -s --date=short --format="OpenWRT v${{ matrix.target.version }} Êõ¥Êñ∞ËÆ∞ÂΩï%nAuthor: %an%nDate: %cd%nCommit: %s%nCommit hash: %H%n" \
          > $GITHUB_WORKSPACE/version-info/${{ matrix.target.branch }}/${{ matrix.target.branch }}.version.txt


      - name: Load custom feeds
        run: |
          if [ ! -d /mnt/workdir/openwrt ]; then
          echo "‚ùå ÈîôËØØÔºöopenwrt ÁõÆÂΩï‰∏çÂ≠òÂú®Ôºåclone ÂèØËÉΩÂ§±Ë¥•"
          exit 1
          fi
          [ -e "$FEEDS_CONF" ] && mv "$FEEDS_CONF" /mnt/workdir/openwrt/feeds.conf.default
          chmod +x $GITHUB_WORKSPACE/LEDE/diy-part1.sh
          cd /mnt/workdir/openwrt
          $GITHUB_WORKSPACE/LEDE/diy-part1.sh

          
      - name: Update & install feeds
        run: |
          cd /mnt/workdir/openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Load custom config and patch
        run: |
          [ -e files ] && mv files /mnt/workdir/openwrt/files
          [ -e banner ] && mv banner /mnt/workdir/openwrt/package/base-files/files/etc/banner
          [ -e ${{ matrix.target.config }} ] && mv ${{ matrix.target.config }} /mnt/workdir/openwrt/.config
          chmod +x LEDE/diy-part2.sh
          cd /mnt/workdir/openwrt
          $GITHUB_WORKSPACE/LEDE/diy-part2.sh

      - name: Download packages
        run: |
          cd /mnt/workdir/openwrt
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: üì¶ TG ÈÄöÁü• - ÂºÄÂßãÊûÑÂª∫
        run: |
          curl -s "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}&text=üöß ÂºÄÂßãÊûÑÂª∫: ${{ matrix.target.name }}" >/dev/null

      - name: Compile firmware
        id: compile
        run: |
          cd /mnt/workdir/openwrt
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT

      - name: üì¶ TG ÈÄöÁü• - ÊûÑÂª∫ÂÆåÊàê
        if: steps.compile.outputs.status == 'success'
        run: |
          curl -s "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}&text=‚úÖ ÊûÑÂª∫ÂÆåÊàê: ${{ matrix.target.name }}" >/dev/null

      - name: Rename and copy firmware for main release
        if: steps.compile.outputs.status == 'success'
        run: |
          cd /mnt/workdir/openwrt/bin/targets/*/*
          ORIGINAL=$(ls immortalwrt-*-rootfs.tar.gz | head -n 1)
          NEWNAME="immortalwrt-${{ matrix.target.version }}-${ORIGINAL#*-}"
          cp "$ORIGINAL" "$NEWNAME"
          echo "FIRMWARE_MAIN=$PWD/$NEWNAME" >> $GITHUB_ENV

      - name: Upload original firmware to main release
        if: steps.compile.outputs.status == 'success'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.PRODUCT_NAME }}
          name: R${{ env.FILE_DATE2 }} for ${{ env.PRODUCT_NAME }}
          body: |
            ‚úÖ immortalwrt ÂÆòÊñπÁ≤æÁÆÄÂõ∫‰ª∂

            Ëá™Âä®ÊûÑÂª∫‰∫ßÁâ©„ÄÇ
          files: ${{ env.FIRMWARE_MAIN }}
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN3 }}

      - name: Rename and copy firmware for backup release
        id: organize
        if: steps.compile.outputs.status == 'success'
        run: |
          mkdir -p $GITHUB_WORKSPACE/renamed
          cd /mnt/workdir/openwrt/bin/targets/*/*
          ORIGINAL=$(ls immortalwrt-*-rootfs.tar.gz | head -n 1)
          NEWNAME="immortalwrt-${{ matrix.target.version }}-${{ env.FILE_DATE2 }}-${ORIGINAL#*${{ matrix.target.version }}-}"
          cp "$ORIGINAL" "$GITHUB_WORKSPACE/renamed/$NEWNAME"
          echo "FIRMWARE_RENAMED=$GITHUB_WORKSPACE/renamed/$NEWNAME" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload renamed firmware to backup release
        if: ${{ env.UPLOAD_RELEASE == 'true' }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.PRODUCT_NAME_Bak }}
          name: R${{ env.FILE_DATE2 }} for ${{ env.PRODUCT_NAME_Bak }}
          body: |
            üîÅ immortalwrt ÊûÑÂª∫Â§á‰ªΩÔºàÂê´ÈáçÂëΩÂêçÊñá‰ª∂Ôºâ

          files: ./renamed/**/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN3 }}

      - name: Upload renamed firmware (artifact)
        if: steps.organize.outputs.status == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: Renamed-${{ matrix.target.branch }}-${{ env.FILE_DATE2 }}
          path: ${{ env.FIRMWARE_RENAMED }}

      - name: Upload version info (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: VersionInfo-${{ matrix.target.branch }}
          path: ${{ github.workspace }}/version-info/${{ matrix.target.branch }}/*.version.txt

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Setup build environment
        run: |
          echo "FILE_DATE3=$(date '+%Y%m%d%H%M')" >> $GITHUB_ENV

      - name: Download version info artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: VersionInfo-*
          path: ./versions

      - name: Download renamed firmware artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: Renamed-*
          path: ./renamed

      - name: Gather and export all version info
        run: |
          find ./versions -name "*.version.txt" | sort | xargs cat > version_body.txt
          echo "ALL_VERSION_INFO<<EOF" >> $GITHUB_ENV
          cat version_body.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Upload renamed firmware log to backup release
        if: ${{ env.UPLOAD_RELEASE == 'true' }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.PRODUCT_NAME_Bak }}
          name: ${{ env.PRODUCT_NAME_Bak }}
          body: |
            üîÅ OpenWRT ÊûÑÂª∫Â§á‰ªΩÔºàÂê´ÈáçÂëΩÂêçÊñá‰ª∂Ôºâ

            ${{ env.ALL_VERSION_INFO }}
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN3 }}
      
      - name: Upload renamed firmware log to  release
        if: ${{ env.UPLOAD_RELEASE == 'true' }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.PRODUCT_NAME }}
          name: R${{ env.FILE_DATE3 }} for ${{ env.PRODUCT_NAME }}
          body: |
            üîÅ OpenWRT ÊûÑÂª∫Â§á‰ªΩÔºàÂê´ÈáçÂëΩÂêçÊñá‰ª∂Ôºâ

            ${{ env.ALL_VERSION_INFO }}
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN3 }}
      

      - name: Telegram notification with full version info
        run: |
          text="‚úîÔ∏è immortalwrt x64&Arm Matrix 2-ReleaseÂ∑≤ÊàêÂäüÁºñËØëÔºÅ%0A"
          curl -s "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}&text=$text" >/dev/null
